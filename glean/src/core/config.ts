/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import { DEFAULT_TELEMETRY_ENDPOINT } from "core/constants";
import { validateURL } from "core/utils";

/**
 * Lists Glean's debug options.
 */
interface DebugOptions {
  // Whether or not lot log pings when they are collected.
  logPings?: boolean,
}

/**
 * Describes how to configure Glean.
 */
export interface ConfigurationInterface {
  // The build identifier generated by the CI system (e.g. "1234/A").
  readonly appBuild?: string,
  // The user visible version string fro the application running Glean.js.
  readonly appDisplayVersion?: string,
  // The server pings are sent to.
  readonly serverEndpoint?: string,
  // Debug configuration.
  debug?: DebugOptions,
}

export class Configuration implements ConfigurationInterface {
  // The build identifier generated by the CI system (e.g. "1234/A").
  readonly appBuild?: string;
  // The user visible version string fro the application running Glean.js.
  readonly appDisplayVersion?: string;
  // The server pings are sent to.
  readonly serverEndpoint: string;
  // Debug configuration.
  debug?: DebugOptions;
 
  constructor(config?: ConfigurationInterface) {
    this.appBuild = config?.appBuild;
    this.appDisplayVersion = config?.appDisplayVersion;
    this.debug = config?.debug;

    if (config?.serverEndpoint && !validateURL(config.serverEndpoint)) {
      throw new Error(
        `Unable to initialize Glean, serverEndpoint ${config.serverEndpoint} is an invalid URL.`);
    }
    this.serverEndpoint = (config && config.serverEndpoint)
      ? config.serverEndpoint : DEFAULT_TELEMETRY_ENDPOINT;
  }
}
