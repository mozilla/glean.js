# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

---

version: 2.1
commands:
  install-node:
    steps:
      - run:
          name: Install Node.js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
parameters:
  python-version:
    type: string
    default: "3.9.4"
jobs:
  spellcheck:
    docker:
      # Use Ubuntu Focal (20.04) so we get aspell 0.60.8 or later
      # (which contains markdown support)
      - image: circleci/buildpack-deps:focal
    steps:
      - checkout
      - run:
          name: Upgrade packages
          command: sudo apt update
      - run:
          name: Install aspell
          command: sudo apt install aspell aspell-en
      - run:
          name: Check documentation spelling
          command: bin/spellcheck.sh list
  lint:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-node
      - run:
          name: Check that package-lock.json is updated as needed
          command: |
            npm install --prefix ./glean --package-lock-only
            if ! git diff --exit-code HEAD -- glean/package-lock.json; then
              echo "=================================================="
              echo "The committed package-lock.json is out-dated."
              echo "Please regenerate package-lock.json using"
              echo "    npm i --package-lock-only"
              echo "Commit the modified file and push."
              echo "=================================================="
              exit 1
            fi
      - run:
          name: Install JavaScript dependencies
          command: npm --prefix ./glean install
      - run:
          name: Run linters
          command: npm --prefix ./glean run lint
      - run:
          name: Audit dependency tree
          command: npm --prefix ./glean audit --production

  test:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-node
      - run:
          name: Install Firefox related dependencies
          command: |
            sudo add-apt-repository ppa:ubuntu-mozilla-daily/ppa
            sudo apt update
            sudo apt install firefox-trunk
      - run:
          name: Install JavaScript dependencies
          command: npm --prefix ./glean install
      - run:
          name: Run unit tests
          command: export PATH=.:$PATH && npm --prefix ./glean run test:unit
      - run:
          name: Run integration tests
          command: export PATH=.:$PATH && npm --prefix ./glean run test:integration

  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-node
      - run:
          name: Install JavaScript dependencies
          command: npm --prefix ./glean install
      - run:
          name: Build library
          command: npm --prefix ./glean run build
      - run:
          name: Install JavaScript documentation dependencies
          command: npm --prefix ./documentation install
      - run:
          name: Build docs
          command: npm --prefix ./documentation run build

  browser-compat-smoke-tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-node
      - run:
          name: Run browser compat smoke tests
          command: |
            npm --prefix ./automation install
            npm --prefix ./automation run link:glean
            npm --prefix ./automation run compat:test:browserstack

  check-size:
    docker:
      - image: cimg/node:16.1.0
    steps:
      - checkout
      - run:
          name: Get and post build sizes to GitHub PR
          command: |
            npm --prefix ./automation install
            npm --prefix ./automation run link:glean
            npm --prefix ./automation run size:report

  # via https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
  docs-deploy:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-node
      - add_ssh_keys:
          fingerprints:
            - "ea:d2:3c:e1:09:cf:1a:1d:85:d6:6e:1d:52:0a:58:41"
      - run:
          name: Install JavaScript dependencies
          command: npm --prefix ./documentation install
      - run:
          name: Build documentation
          command: npm --prefix ./documentation run build
      - run:
          name: Disable jekyll builds
          command: touch documentation/dist/.nojekyll
      - run:
          name: Show contents
          command: ls -R documentation/dist
      - run:
          name: Setup SSH key and deploy docs to gh-pages branch
          command: |
            git config user.email "dataops+ci-bot@mozilla.com"
            git config user.name "dataops-ci-bot"
            npm --prefix ./documentation run publish:docs

  publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - install-node
      - run:
          name: Install JavaScript dependencies
          command: npm --prefix ./glean install
      - run:
          name: NPM Authentication
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > glean/.npmrc
      # This conditional matches the tag that contains 'pre', used
      # to mark prerelease builds. Since CircleCI conditionals do
      # not directly support 'else's, we need another conditional.
      - when:
          condition:
            matches:
              pattern: "^v.*-pre.*$"
              value: << pipeline.git.tag >>
          steps:
            - run:
                name: Publish to npm (prerelease)
                command: export PATH=.:$PATH && (cd glean && npm publish --access public --tag prerelease)
      # This conditional matches 'release': we won't tag the npm
      # release in this case, because no 'pre' is found in the tag.
      - when:
          condition:
            not:
              matches:
                pattern: "^v.*-pre.*$"
                value: << pipeline.git.tag >>
          steps:
            - run:
                name: Publish to npm
                command: export PATH=.:$PATH && (cd glean && npm publish --access public)
      - run:
          name: Get ghr release tool
          command: |
            GHR=ghr_v0.13.0_linux_amd64
            GHR_SHA256=c428627270ae26e206cb526cb8c7bdfba475dd278f6691ddaf863355adadfa13
            curl -sfSL --retry 5 -O "https://github.com/tcnksm/ghr/releases/download/v0.13.0/${GHR}.tar.gz"
            echo "${GHR_SHA256} *${GHR}.tar.gz" | sha256sum -c -
            tar -xf "${GHR}.tar.gz"
            cp ./${GHR}/ghr ghr

workflows:
  ci:
    jobs:
      - spellcheck
      - lint
      - build:
          requires:
            - lint
      - test:
          requires:
            - build
      - hold:
          type: approval
          requires:
            - lint
            - build
            - test
          filters:
            branches:
              ignore:
                - main
                - release
                - /^release-.*/
      - check-size:
          context: data-sre-gleanjs
          requires:
            - hold
      - browser-compat-smoke-tests:
          context: data-sre-gleanjs
          filters:
            branches:
              only:
                - main
                - release
                - /^release-.*/
      - docs-deploy:
          context: data-sre-gleanjs
          filters:
            branches:
              only:
                - main
                - release
                - /^release-.*/
      - publish:
          context: data-sre-gleanjs
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
